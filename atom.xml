<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lu Ruijie&#39;s Personal Homepage</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luyuonism.github.io/"/>
  <updated>2019-11-06T06:01:32.325Z</updated>
  <id>https://luyuonism.github.io/</id>
  
  <author>
    <name>ruijielu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django配置  STATIC_ROOT</title>
    <link href="https://luyuonism.github.io/2019/11/05/django-STATIC_ROOT/"/>
    <id>https://luyuonism.github.io/2019/11/05/django-STATIC_ROOT/</id>
    <published>2019-11-05T02:25:49.382Z</published>
    <updated>2019-11-06T06:01:32.325Z</updated>
    
    <content type="html"><![CDATA[<p>关于django静态文件的配置说明————STATIC_ROOT和STATIC_URL以及STATICFILES_DIRS</p><a id="more"></a><h3 id="MEDIA-ROOT："><a href="#MEDIA-ROOT：" class="headerlink" title="MEDIA_ROOT："></a>MEDIA_ROOT：</h3><p>在说STATIC_ROOT之前，必须得提一下MEDIA_ROOT，在配置中，当你需要在你的项目中按照你心中的目录来存储文件时，MEDIA_ROOT是必不可少的。</p><pre><code class="python"># 文件存储配置MEDIA_URL = &#39;/media/&#39;MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;) # 默认根目录</code></pre><p>通过在setting.py文件中添加如上设置，就会设置好你需要放置文件的默认根目录</p><pre><code class="python">image = models.ImageField(upload_to=&quot;image/%Y/%m&quot;, default=u&quot;image/default.png&quot;, max_length=100)</code></pre><p>上面是一个数据库模型的字段代码，当你使用upload_to这个属性的时候，django会自动解析，生成相对路径，保存在MEDIA_ROOT设置的根目录下</p><h3 id="STATIC-ROOT"><a href="#STATIC-ROOT" class="headerlink" title="STATIC_ROOT:"></a>STATIC_ROOT:</h3><p>那为什么要使用STATIC_ROOT呢，是因为当你设置中DEBUG为True时，django会自动为你静态文件代理，不过当DEBUG为False时，意味着你要进入生产环境，那么，你就必须使用STATIC_ROOT来指明你的静态文件在哪里，就像MEDIA_ROOT一样。</p><pre><code class="python">STATIC_URL = &#39;/static/&#39;    STATICFILES_DIRS = [    os.path.join(BASE_DIR, &quot;static&quot;)]STATIC_ROOT = os.path.join(BASE_DIR, &quot;static&quot;)</code></pre><p>在setting.py文件中添加上面代码，并且在urls.py中添加下面代码即可</p><pre><code class="python"># 配置静态文件代理    url(r&#39;^static/(?P&lt;path&gt;.*)$&#39;, serve, {&#39;document_root&#39;: STATIC_ROOT}),</code></pre><h2 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h2><p>详细介绍STATIC_ROOT, <a href="https://blog.csdn.net/alxandral_brother/article/details/52202270" target="_blank" rel="noopener">点击这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于django静态文件的配置说明————STATIC_ROOT和STATIC_URL以及STATICFILES_DIRS&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://luyuonism.github.io/tags/python/"/>
    
      <category term="django" scheme="https://luyuonism.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>python f-string式格式化</title>
    <link href="https://luyuonism.github.io/2019/06/05/python-f-string/"/>
    <id>https://luyuonism.github.io/2019/06/05/python-f-string/</id>
    <published>2019-06-04T16:00:00.000Z</published>
    <updated>2019-11-06T01:50:21.156Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>interview</title>
    <link href="https://luyuonism.github.io/2018/07/05/interview/"/>
    <id>https://luyuonism.github.io/2018/07/05/interview/</id>
    <published>2018-07-05T04:03:43.000Z</published>
    <updated>2019-11-07T02:17:45.150Z</updated>
    
    <content type="html"><![CDATA[<p>python 学习之路</p><a id="more"></a><h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>with语句实质是上下文管理。</p><ol><li>上下文管理协议。包含方法__enter__()和__exit__(),支持该协议对象要实现这两个方法。</li><li>上下文管理器，定义执行with语句时要建立的运行时上下文，负责执行with语句块上下文中的进入与退出操作。</li><li>进入上下文的时候执行__enter__方法，如果设置as var语句，var变量接受__enter__方法返回值。</li><li>如果运行时发生了异常，就退出上下文管理器。调用管理器__exit__方法。</li></ol><p>但是with本身并没有异常捕获的功能，同时如果发生了运行时异常，它照样可以关闭文件释放资源。</p><p>应用场景: 1、文件操作。2、进程线程之间互斥对象。3、支持上下文其他对象</p><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><ul><li>yield 是一个类似 return 的关键字，只是这个函数返回的是个生成器</li><li>当你调用这个函数的时候，函数内部的代码并不立马执行 ，这个函数只是返回一个生成器对象</li><li>当你使用for进行迭代的时候，函数中的代码才会执行</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://i.loli.net/2019/11/06/aGwNEdLhom9B4QM.png" alt="常用数据类型" title="常用数据类型"></p><h3 id="type-和-instance"><a href="#type-和-instance" class="headerlink" title="type() 和 instance()"></a>type() 和 instance()</h3><ul><li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li><li>isinstance() 会认为子类是一种父类类型，考虑继承关系。<br>如果要判断两个类型是否相同推荐使用 isinstance()。</li></ul><pre><code class="python">a = 2print(isinstance(a,int))   # Trueprint(isinstance(a,str))   # Falseclass A:    passclass B(A):    passprint(&quot;isinstance&quot;,isinstance(A(),A))   # isinstance Trueprint(&quot;type&quot;,type(A())  == A)    # type Trueprint(&#39;isinstance&#39;,isinstance(B(),A) )   # isinstance Trueprint(&#39;type&#39;,type(B()) == A)     #  type False</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="和"><a href="#和" class="headerlink" title="// 和 %"></a>// 和 %</h3><pre><code class="python">&gt;&gt;&gt; 13 // 34&gt;&gt;&gt; -13 // 3-5&gt;&gt;&gt; 13 // -3-5&gt;&gt;&gt; -13 // -34&gt;&gt;&gt; 13 % 31&gt;&gt;&gt; -13 % 32&gt;&gt;&gt; 13 % -3-2&gt;&gt;&gt; -13 % -3-1</code></pre><p><strong>如果：x // y = a，x % y = b</strong><br><strong>那么：x = a * y + b</strong><br>13 // -3 = -5, 13 % -3 = -2<br>13 = (-5) * (-3) + (-2)</p><h3 id="gt-gt-和-lt-lt"><a href="#gt-gt-和-lt-lt" class="headerlink" title="&gt;&gt; 和 &lt;&lt;"></a>&gt;&gt; 和 &lt;&lt;</h3><p>‘&gt;&gt;’ 右移  除2<br>‘&lt;&lt;’ 左移  乘2</p><h3 id="math-isclose-a-b-rel-tol-1e-9"><a href="#math-isclose-a-b-rel-tol-1e-9" class="headerlink" title="math.isclose(a, b, rel_tol=1e-9)"></a>math.isclose(a, b, rel_tol=1e-9)</h3><p>浮点数相等的比较，由于存在精度的关系，不能使用==判断，要用math模块的isclose方法。</p><pre><code class="python">&gt;&gt;&gt; import math&gt;&gt;&gt; math.isclose(1.0, 1.0000000001)True&gt;&gt;&gt; math.isclose(1.0, 1.0000000001, rel_tol=1e-10)False</code></pre><h3 id="和-is"><a href="#和-is" class="headerlink" title="== 和 is"></a>== 和 is</h3><p>is 判断的是a对象是否是b对象，是通过id来判断<br>== 判断的是a对象的值和b对象的值和类型是否相等，是通过value和type来判断</p><pre><code class="python">&gt;&gt;&gt; a = 1&gt;&gt;&gt; b = 1.0&gt;&gt;&gt; a is bFalse&gt;&gt;&gt; a == bTrue&gt;&gt;&gt; id(a)12777000&gt;&gt;&gt; id(b)14986000&gt;&gt;&gt; a = 1&gt;&gt;&gt; b = 1&gt;&gt;&gt; a is bTrue&gt;&gt;&gt; a == bTrue&gt;&gt;&gt; id(a)12777000&gt;&gt;&gt; id(b)12777000</code></pre><h2 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h2><p>break可以提前结束一层循环，continue可以提前结束一次循环。</p><h2 id="循环else"><a href="#循环else" class="headerlink" title="循环else"></a>循环else</h2><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p><code>assert 要判断表达式, &#39;字符串&#39;</code></p><pre><code class="python">i = 0mySum = 0while i &lt; 5:    mySum += i    i += 1assert mySum == 15, &#39;mySum不等于15&#39;print(&#39;mySum = {}&#39;.format(mySum))</code></pre><p>输出结果：</p><pre><code>Traceback (most recent call last):  File &quot;d:/Projects/ch04/4.17-assert.py&quot;, line 9, in &lt;module&gt;    assert mySum == 15, &#39;mySum不等于15&#39;AssertionError: mySum不等于15</code></pre><p><strong>当判断的表达式为真时，assert语句不做任何动作，当表达式为假时，会触发异常，并将字符串内容输出。字符串可以省略。</strong></p><h2 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h2><h3 id="find-和-index"><a href="#find-和-index" class="headerlink" title="find 和 index"></a>find 和 index</h3><p>find: 查找字符串，严格区分大小写，返回值为字符串第一次出现所在的索引，后面的不管；未找到字符串，返回-1<br>index: 基本等同于find，区别：如果index查找不到，给出异常错误。</p><h3 id="列表的添加-插入-删除"><a href="#列表的添加-插入-删除" class="headerlink" title="列表的添加/插入/删除"></a>列表的添加/插入/删除</h3><pre><code class="python">mylist = [&#39;abcd&#39;, &#39;zhangsan&#39;, &#39;jiangning&#39;]mylist.append(&#39;defg&#39;)  # [&#39;abcd&#39;, &#39;zhangsan&#39;, &#39;jiangning&#39;, &#39;defg&#39;]# append 添加，把添加内容直接作为元素添加appendlist = [&#39;aaa&#39;, &#39;bbb&#39;]mylist.append(appendlist)   # [&#39;abcd&#39;, &#39;zhangsan&#39;, &#39;jiangning&#39;, [&#39;aaa&#39;, &#39;bbb&#39;]]# extend 添加，把列表拆成元素添加extendlist = [&#39;aaa&#39;, &#39;bbb&#39;]mylist.extend(extendlist)   # [&#39;abcd&#39;, &#39;zhangsan&#39;, &#39;jiangning&#39;, &#39;aaa&#39;, &#39;bbb&#39;]# insert 在index位置前插入元素mylist.insert(1, &#39;defg&#39;)    # [&#39;abcd&#39;, &#39;defg&#39;, &#39;zhangsan&#39;, &#39;jiangning&#39;]# insert对于列表的插入，等同于append做法mylist.insert(1, appendlist)   # [&#39;abcd&#39;, [&#39;aaa&#39;, &#39;bbb&#39;], &#39;zhangsan&#39;, &#39;jiangning&#39;]# 对列表元素进行修改，使用索引定位到元素，直接赋值修改mylist[1] = &#39;lisi&#39;  [&#39;abcd&#39;, &#39;lisi&#39;, &#39;zhangsan&#39;, &#39;jiangning&#39;]# del删除给定下标的元素mylist = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;]del(mylist[1])   # [&#39;a&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;]# pop删除最后一个或指定索引的元素mylist.pop()  # [&#39;a&#39;, &#39;c&#39;, &#39;a&#39;]# remove 删除指定值的元素# 一次只删除一个mylist.remove(&#39;a&#39;)    # [&#39;c&#39;, &#39;a&#39;]mylist.remove(&#39;a&#39;)    # [&#39;c&#39;]</code></pre><h3 id="sort-sorted-reverse-reversed"><a href="#sort-sorted-reverse-reversed" class="headerlink" title="sort()  sorted()  reverse()  reversed()"></a>sort()  sorted()  reverse()  reversed()</h3><ul><li><p>sort方法和sorted函数：排序使用<br>sort方法: 列表对象有一个sort()方法，实现将原列表进行一个排序，然后return，因为python 默认return返回一个None,所以非要将lst.sort()指向一个变量，那么这个变量值就是None<br><img src="https://i.loli.net/2019/11/06/uDiWtI1LMxeofac.png" alt="sort方法" title="sort方法"><br>sorted函数: sorted()是一个函数，即面向过程，将排序过程进行一个封装，按照不同的对象进行处理，不同的对象最后统一都是以列表的形式返回数据，即 return a_lst<br><img src="https://i.loli.net/2019/11/06/gCmXtq2okPy1McI.png" alt="sorted函数" title="sorted函数"></p></li><li><p>reverse方法和reversed函数：反转序列使用<br>reverse方法: 实现与sort()方法基本一致，功能的差异是对一个列表进行反转然后return，同样因为python 默认return返回一个None,所以当非要将lst.reverse()指向一个变量，那么这个变量值也是None<br><img src="https://i.loli.net/2019/11/06/RICP3bFkplZvUnV.png" alt="reverse方法" title="reverse方法"><br>reversed函数: 与sorted函数不同的是，reversed函数不是返回一个反转后的列表或者字符串，而是返回一个内存对象，且不支持字典的反转， 返回反向迭代器<br><img src="https://i.loli.net/2019/11/06/JHT9bL6o8f4YryM.png" alt="reversed函数" title="reversed函数"></p></li></ul><p>sort和reverse是列表对象的方法，列表对象独有的方法，并且这两种方法都是在原列表上进行操作，并直接返回，返回值为None<br>sorted函数是支持字符串，字典，列表对象的排序，不在原列表上排序，而是返回一个新的列表，reveresd函数较为特殊，返回一个内存对象，而不是反转后的值</p><h3 id="dict-key-和-dict-get-key"><a href="#dict-key-和-dict-get-key" class="headerlink" title="dict[key] 和 dict.get(key)"></a>dict[key] 和 dict.get(key)</h3><p>一般对于字典取值会有dict[key]的方法取值，但是如果键key不存在，则会出现报错</p><pre><code class="python">&gt;&gt;&gt;a = {&#39;one&#39;:1,&#39;two&#39;:2,&#39;three&#39;:3}&gt;&gt;&gt;a[&#39;one&#39;]           1&gt;&gt;&gt;a[&#39;four&#39;]           Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;KeyError: &#39;four&#39;</code></pre><p>因为 dict[key] 的方式在无法判断是否存在 key 的情况下会出现 KeyError ，所以 可以使用dict.get(key[,default]) 的方法。</p><p>dict.get(key[,default]) 会查询字典中的key键，要是存在key键，则返回key键的值，要是没有key键，则返回 default， 若是没有 default，则返回 None。</p><pre><code class="python">&gt;&gt;&gt; a.get(&#39;four&#39;)   # 返回None&gt;&gt;&gt; a.get(&#39;four&#39;,&#39;can not find four&#39;)   # 返回default&#39;can not find four&#39;&gt;&gt;&gt;a  # 使用dict.get()后dict不变{&#39;one&#39;:1,&#39;two&#39;:2,&#39;three&#39;:3}</code></pre><p><em>dict.setdefault(key[,default]) 表示：如果dict中存在key，则返回key的值， 如果不存在key，则返回default的值，并且在dict中增加 key: default 键值对，如果 default 不存在，则在dict增加 key:None 的键值对。</em></p><pre><code class="python">&gt;&gt;&gt;a{&#39;one&#39;:1,&#39;two&#39;:2,&#39;three&#39;:3}&gt;&gt;&gt; a.setdefault(&#39;four&#39;,4)     # a 没有 &#39;four&#39;键，返回default, a 增加&#39;four&#39;:4键值对4&gt;&gt;&gt; a  {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3, &#39;four&#39;: 4}&gt;&gt;&gt; a.setdefault(&#39;five&#39;)     # a没有&#39;five&#39;键，没有default，返回None，a增加&#39;five&#39;:None键值对&gt;&gt;&gt; a{&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3, &#39;four&#39;: 4, &#39;five&#39;: None}&gt;&gt;&gt; a.setdefault(&#39;one&#39;)1&gt;&gt;&gt; a{&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3, &#39;four&#39;: 4, &#39;five&#39;: None}</code></pre><h3 id="字典删除"><a href="#字典删除" class="headerlink" title="字典删除"></a>字典删除</h3><ul><li>clear 清空字典的内容，字典还在  dict.clear()</li><li>del:</li></ul><ul><li>del(dict) 将删除整个字典</li><li>del(dict[‘key’])  删除的是键值对，是整个元素</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>[起始位置:结束位置:步长]<br>步长到达位置的元素被取出，如果超出结束位置的话，结束，不报错，超出的部分取不到元素</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="args-和-kwargs"><a href="#args-和-kwargs" class="headerlink" title="args 和 kwargs"></a>args 和 kwargs</h3><h3 id="局部变量-全局变量-global"><a href="#局部变量-全局变量-global" class="headerlink" title="局部变量 全局变量 global"></a>局部变量 全局变量 global</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h3><h3 id="if-name-‘-main-‘"><a href="#if-name-‘-main-‘" class="headerlink" title="if __name__ = ‘__main__‘:"></a>if __name__ = ‘__main__‘:</h3><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><h3 id="datetime…"><a href="#datetime…" class="headerlink" title="datetime…"></a>datetime…</h3><h2 id="多线程和多进程"><a href="#多线程和多进程" class="headerlink" title="多线程和多进程"></a>多线程和多进程</h2><h3 id="怎么实现多线程"><a href="#怎么实现多线程" class="headerlink" title="怎么实现多线程"></a>怎么实现多线程</h3><h3 id="线程和进程的关系"><a href="#线程和进程的关系" class="headerlink" title="线程和进程的关系"></a>线程和进程的关系</h3><h3 id="run-start"><a href="#run-start" class="headerlink" title="run()  start()"></a>run()  start()</h3><h3 id="GIL-全局解释锁"><a href="#GIL-全局解释锁" class="headerlink" title="GIL 全局解释锁"></a>GIL 全局解释锁</h3><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="init-…"><a href="#init-…" class="headerlink" title="__init__ …"></a>__init__ …</h3><h3 id="类-对象"><a href="#类-对象" class="headerlink" title="类 对象"></a>类 对象</h3><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>try…except…else…finally</p><h2 id="列表推倒式-迭代器-生成器"><a href="#列表推倒式-迭代器-生成器" class="headerlink" title="列表推倒式 迭代器  生成器"></a>列表推倒式 迭代器  生成器</h2><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器的详细部分，<a href="https://luyuonism.github.io/2018/07/05/decorator/">点击这里</a></p><h2 id="lamba-map-reduce-filter"><a href="#lamba-map-reduce-filter" class="headerlink" title="lamba  map()  reduce()  filter()"></a>lamba  map()  reduce()  filter()</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 学习之路&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://luyuonism.github.io/tags/python/"/>
    
      <category term="interview" scheme="https://luyuonism.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>decorator</title>
    <link href="https://luyuonism.github.io/2018/06/05/decorator/"/>
    <id>https://luyuonism.github.io/2018/06/05/decorator/</id>
    <published>2018-06-05T01:11:45.000Z</published>
    <updated>2019-11-07T02:18:14.801Z</updated>
    
    <content type="html"><![CDATA[<p>装饰器</p><a id="more"></a><pre><code class="python">def a():    temp = []    for i in range(100000):        temp.append(&#39;!!!&#39;)    print(len(temp))a()</code></pre><p>运行结果:</p><pre><code class="python">100000</code></pre><p>此时，想要计算下函数运行的时间:</p><pre><code class="python">import timedef a():    start = time.clock()    temp = []    for i in range(100000):        temp.append(&#39;!!!&#39;)    print(len(temp))    end = time.clock()    print(&#39;函数运行时间为:&#39; + str(end - start))a()</code></pre><p>运行结果:</p><pre><code class="python">100000函数运行时间为:0.0142545</code></pre><p>但是不能每个函数都加上这两句话，<br>于是，</p><pre><code class="python">import timedef CalTime(fun):    start = time.clock()    fun()    end = time.clock()    print(&#39;函数运行时间为:&#39; + str(end - start))def a():    temp = []    for i in range(100000):        temp.append(&#39;!!!&#39;)    print(len(temp))CalTime(a)</code></pre><p>运行结果:</p><pre><code class="python">100000函数运行时间为:0.0234953</code></pre><p>此时，无论有多少函数需要计算运行时间，都可以轻松实现。<br>那现在想要弄一个新函数，只是在原函数的基础上加上时间计算</p><pre><code class="python">import timedef CalTime(fun):    def In():        start = time.clock()        fun()        end = time.clock()        print(&#39;函数运行时间为:&#39; + str(end - start))    return Indef a():    temp = []    for i in range(100000):        temp.append(&#39;!!!&#39;)    print(len(temp))print(CalTime(a))</code></pre><p><a href="https://luyuonism.github.io/2018/07/05/decorator/">闭包</a>…<br>运行结果:</p><pre><code class="python">&lt;function CalTime.&lt;locals&gt;.In at 0x000001CF3B90E0D0&gt;</code></pre><p>返回了新函数的指针</p><pre><code class="python">import timedef CalTime(fun):    def In():        start = time.clock()        fun()        end = time.clock()        print(&#39;函数运行时间为:&#39; + str(end - start))    return Indef a():    temp = []    for i in range(100000):        temp.append(&#39;!!!&#39;)    print(len(temp))# print(CalTime(a))new_a = CalTime(a)new_a()</code></pre><p>运行结果:</p><pre><code class="python">100000函数运行时间为:0.0270945</code></pre><p>这时</p><pre><code class="python">import timedef CalTime(fun):    def In():        start = time.clock()        fun()        end = time.clock()        print(&#39;函数运行时间为:&#39; + str(end - start))    return In@CalTimedef a():    temp = []    for i in range(100000):        temp.append(&#39;!!!&#39;)    print(len(temp))a()</code></pre><p>运行结果:</p><pre><code class="python">100000函数运行时间为:0.1938796</code></pre><p>于是装饰器，成了<br>它的主要功能就是在不改变函数内部代码的情况下增添一些新的功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装饰器&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://luyuonism.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django</title>
    <link href="https://luyuonism.github.io/2018/06/05/django/"/>
    <id>https://luyuonism.github.io/2018/06/05/django/</id>
    <published>2018-06-05T01:11:43.000Z</published>
    <updated>2019-11-07T07:36:35.940Z</updated>
    
    <content type="html"><![CDATA[<p>Django–Django是一个由Python编写的开放源代码的Web应用框架。</p><a id="more"></a><h1 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h1><p><em>文章 分类 评论 搜索 统计</em></p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p>从用户的角度，通过访问不同的url，来得到不同的网页。<br>从开发者的角度，通过解析不同的url，来输出（render/display）该url指向的网页内容。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>用户请求(request) –&gt; 通过访问不同的url<br>响应(response)的内容，也就是用户看到的内容 –&gt; 用户最终看到的内容</p><p>http  用户发起请求 –&gt; 响应：浏览器获得响应内容，解析html，css，javascript</p><p>1.获得url请求 request<br>2.解析request （拿到url，解析url，让处理该url的方法去处理request）<br>3.拼接response ，返回给用户<br>4.浏览器获得响应内容，解析html，css，javascript</p><h2 id="django框架"><a href="#django框架" class="headerlink" title="django框架"></a>django框架</h2><p>创建项目:</p><pre><code class="django">django-admin startproject 项目名</code></pre><p>创建一个testdj目录,目录的结构为：</p><pre><code>testdj/    manage.py    一个让你用各种方式管理 Django 项目的命令行工具。    testdj/        一个纯 Python 包        __init__.py     一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。        settings.py     Django 项目的配置文件。        urls.py     Django 项目的 URL 声明，就像你网站的“目录”。        wsgi.py     作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。</code></pre><p>启动服务</p><pre><code class="python">python manage.py runserver</code></pre><p>将会输出如下结果：</p><pre><code class="python">python manage.py runserverPerforming system checks...System check identified no issues (0 silenced).May 10, 2018 - 17:21:16Django version 2.0.5, using settings &#39;testdj.settings&#39;Starting development server at http://127.0.0.1:8000/Quit the server with CTRL-BREAK.</code></pre><p>更换端口</p><pre><code class="python">python manage.py runserver 8080</code></pre><p>如果想要修改服务器监听的IP，在端口之前输入新的</p><pre><code class="python">python manage.py runserver 0.0.0.0:8000</code></pre><ul><li>做好url映射，</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django–Django是一个由Python编写的开放源代码的Web应用框架。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://luyuonism.github.io/tags/python/"/>
    
      <category term="django" scheme="https://luyuonism.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>MySql</title>
    <link href="https://luyuonism.github.io/2018/06/05/sql/"/>
    <id>https://luyuonism.github.io/2018/06/05/sql/</id>
    <published>2018-06-05T01:11:43.000Z</published>
    <updated>2019-11-07T06:21:52.475Z</updated>
    
    <content type="html"><![CDATA[<p>结构化查询语言</p><a id="more"></a><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><pre><code class="mysql">create database shop;</code></pre><h1 id="一-数据库与SQL"><a href="#一-数据库与SQL" class="headerlink" title="一 数据库与SQL"></a>一 数据库与SQL</h1><h2 id="数据库是什么"><a href="#数据库是什么" class="headerlink" title="数据库是什么"></a>数据库是什么</h2><h2 id="数据库的结构"><a href="#数据库的结构" class="headerlink" title="数据库的结构"></a>数据库的结构</h2><h2 id="SQL概要"><a href="#SQL概要" class="headerlink" title="SQL概要"></a>SQL概要</h2><h2 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h2><h2 id="表的删除和更新"><a href="#表的删除和更新" class="headerlink" title="表的删除和更新"></a>表的删除和更新</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结构化查询语言&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://luyuonism.github.io/tags/python/"/>
    
      <category term="django" scheme="https://luyuonism.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://luyuonism.github.io/2018/04/13/hello-world/"/>
    <id>https://luyuonism.github.io/2018/04/13/hello-world/</id>
    <published>2018-04-13T12:46:25.000Z</published>
    <updated>2019-11-06T10:20:47.574Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
